import unittest
from sudoku.board_solver import BoardSolver 

class TestSolverMethods(unittest.TestCase):
    
    def test_valid_board(self):
        board_1 = [["5","3",".",".","7",".",".",".","."]
                ,["6",".",".","1","9","5",".",".","."]
                ,[".","9","8",".",".",".",".","6","."]
                ,["8",".",".",".","6",".",".",".","3"]
                ,["4",".",".","8",".","3",".",".","1"]
                ,["7",".",".",".","2",".",".",".","6"]
                ,[".","6",".",".",".",".","2","8","."]
                ,[".",".",".","4","1","9",".",".","5"]
                ,[".",".",".",".","8",".",".","7","9"]]
        board_2=  [["5","3",".",".","7",".",".",".","."]
                ,["6",".",".","1","9","5",".",".","."]
                ,["6","9","8",".",".",".",".","6","."]
                ,["8",".",".",".","6",".",".",".","3"]
                ,["4",".",".","8",".","3",".",".","1"]
                ,["7",".",".",".","2",".",".",".","6"]
                ,[".","6",".",".",".",".","2","8","."]
                ,[".",".",".","4","1","9",".",".","5"]
                ,[".",".",".",".","8",".",".","7","9"]]

        s1 = BoardSolver(board_1)
        s2 = BoardSolver(board_2)

        self.assertEqual(s1.is_valid(), True, "Failed the test for board2")
        self.assertEqual(s2.is_valid(), False, "Failed the test for board3")
        self.assertNotEqual(board_1, board_2, "The boards are not equal")

if __name__ == '__main__':
    unittest.main()

